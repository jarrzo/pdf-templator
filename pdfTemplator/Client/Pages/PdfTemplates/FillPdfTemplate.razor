@page "/templates/{id:int}/fill"
@using pdfTemplator.Shared.Constants.Enums

<PageTitle>Fill template</PageTitle>

<EditForm Model="Fields" OnValidSubmit="GenerateDocument">
    <MudText Typo="Typo.h6">
        <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />
        Template filling
    </MudText>
    <MudPaper Class="pa-2 ma-2">
        <MudGrid>
            @foreach (var field in Fields)
            {
                @if (field.HasElements)
                {
                    <MudItem xs="12">
                        <MudPaper Class="pa-2 ma-2" Outlined="true">
                            <MudGrid>
                                <MudItem xs="12">
                                    @field.Key elements:
                                </MudItem>
                                <MudItem xs="12">
                                    @foreach (var element in field.Elements)
                                    {
                                        <MudPaper Class="pa-2 ma-2" Outlined="true">
                                            <MudGrid>
                                                @foreach (var elementField in element)
                                                {
                                                    <MudItem xs="12" sm="CountSize(2, element.Count)" md="CountSize(4, element.Count)" lg="CountSize(6, element.Count)">
                                                        <MudTextField Label="@elementField.Key" @bind-Value="elementField.Value" For="@(() => elementField.Value)" Variant="Variant.Outlined" />
                                                    </MudItem>
                                                }
                                                <MudItem xs="12" Class="d-flex justify-end">
                                                    <MudButton Variant="Variant.Outlined" OnClick="@(() => field.Elements.Remove(element))" Color="Color.Warning"><MudIcon Icon="@Icons.Material.Filled.Remove" />Remove element</MudButton>
                                                </MudItem>
                                            </MudGrid>
                                        </MudPaper>
                                    }
                                </MudItem>
                                <MudItem xs="12" Class="d-flex justify-end">
                                    <MudButton Variant="Variant.Outlined" OnClick="@(() => AddElement(field))" Color="Color.Primary"><MudIcon Icon="@Icons.Material.Filled.Add" />Add element</MudButton>
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="12" sm="CountSize(2, SimpleFieldsCount)" md="CountSize(4, SimpleFieldsCount)" lg="CountSize(6, SimpleFieldsCount)">
                        @if (field.Type == InsertableType.Text)
                        {
                            <MudTextField T="string" Label="@field.Key" @bind-Value="field.Value" For="@(() => field.Value)" Variant="Variant.Outlined" />
                        }
                        @if (field.Type == InsertableType.Date)
                        {
                            <MudTextField T="string" Label="@field.Key" @bind-Value="field.Value" For="@(() => field.Value)" Variant="Variant.Outlined" InputType="InputType.Date" Format="@GetInsertableDateFormat(field)"/>
                        }
                    </MudItem>
                }
            }
        </MudGrid>
    </MudPaper>
    <div class="mt-3">
        <MudButton DisableElevation Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Success">Generate</MudButton>
        <MudButton DisableElevation Variant="Variant.Filled" Href="/templates">Go back</MudButton>
    </div>
</EditForm>